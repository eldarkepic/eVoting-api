// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eVoting.Server.Models;

namespace eVoting.Server.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20210514101113_InitialDataase")]
    partial class InitialDataase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Candidate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByVoterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedByVoterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VoteNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByVoterId");

                    b.HasIndex("ModifiedByVoterId");

                    b.HasIndex("PartyId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Party", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByVoterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedByVoterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByVoterId");

                    b.HasIndex("ModifiedByVoterId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.PartyCandidate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CandidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VotelistId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PartyId");

                    b.HasIndex("VotelistId");

                    b.ToTable("PartyCandidates");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Vote", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CandidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByVoterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedByVoterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CreatedByVoterId");

                    b.HasIndex("ModifiedByVoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Votelist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByVoterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedByVoterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByVoterId");

                    b.HasIndex("ModifiedByVoterId");

                    b.ToTable("Votelists");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.VotelistParty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CandidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VotelistId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PartyId");

                    b.HasIndex("VotelistId");

                    b.ToTable("UserVotes");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Voter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BirthDate")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JMBG")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eVoting.Server.Models.Models.Voter", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eVoting.Server.Models.Models.Voter", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eVoting.Server.Models.Models.Voter", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eVoting.Server.Models.Models.Voter", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Candidate", b =>
                {
                    b.HasOne("eVoting.Server.Models.Models.Voter", "CreatedByVoter")
                        .WithMany("CreatedCandidates")
                        .HasForeignKey("CreatedByVoterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("eVoting.Server.Models.Models.Voter", "ModifiedByVoter")
                        .WithMany("ModifiedCandidates")
                        .HasForeignKey("ModifiedByVoterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("eVoting.Server.Models.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.Navigation("CreatedByVoter");

                    b.Navigation("ModifiedByVoter");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Party", b =>
                {
                    b.HasOne("eVoting.Server.Models.Models.Voter", "CreatedByVoter")
                        .WithMany()
                        .HasForeignKey("CreatedByVoterId");

                    b.HasOne("eVoting.Server.Models.Models.Voter", "ModifiedByVoter")
                        .WithMany()
                        .HasForeignKey("ModifiedByVoterId");

                    b.Navigation("CreatedByVoter");

                    b.Navigation("ModifiedByVoter");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.PartyCandidate", b =>
                {
                    b.HasOne("eVoting.Server.Models.Models.Candidate", "Candidate")
                        .WithMany("PartyCandidates")
                        .HasForeignKey("CandidateId");

                    b.HasOne("eVoting.Server.Models.Models.Party", null)
                        .WithMany("PartyCandidates")
                        .HasForeignKey("PartyId");

                    b.HasOne("eVoting.Server.Models.Models.Votelist", "Votelist")
                        .WithMany()
                        .HasForeignKey("VotelistId");

                    b.Navigation("Candidate");

                    b.Navigation("Votelist");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Vote", b =>
                {
                    b.HasOne("eVoting.Server.Models.Models.Candidate", "Candidate")
                        .WithMany("Votes")
                        .HasForeignKey("CandidateId");

                    b.HasOne("eVoting.Server.Models.Models.Voter", "CreatedByVoter")
                        .WithMany("CreatedVotes")
                        .HasForeignKey("CreatedByVoterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("eVoting.Server.Models.Models.Voter", "ModifiedByVoter")
                        .WithMany("ModifiedVotes")
                        .HasForeignKey("ModifiedByVoterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Candidate");

                    b.Navigation("CreatedByVoter");

                    b.Navigation("ModifiedByVoter");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Votelist", b =>
                {
                    b.HasOne("eVoting.Server.Models.Models.Voter", "CreatedByVoter")
                        .WithMany("CreatedVotelists")
                        .HasForeignKey("CreatedByVoterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("eVoting.Server.Models.Models.Voter", "ModifiedByVoter")
                        .WithMany("ModifiedVotelists")
                        .HasForeignKey("ModifiedByVoterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByVoter");

                    b.Navigation("ModifiedByVoter");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.VotelistParty", b =>
                {
                    b.HasOne("eVoting.Server.Models.Models.Candidate", null)
                        .WithMany("UserVotes")
                        .HasForeignKey("CandidateId");

                    b.HasOne("eVoting.Server.Models.Models.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.HasOne("eVoting.Server.Models.Models.Votelist", "Votelist")
                        .WithMany("UserVotes")
                        .HasForeignKey("VotelistId");

                    b.Navigation("Party");

                    b.Navigation("Votelist");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Candidate", b =>
                {
                    b.Navigation("PartyCandidates");

                    b.Navigation("UserVotes");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Party", b =>
                {
                    b.Navigation("PartyCandidates");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Votelist", b =>
                {
                    b.Navigation("UserVotes");
                });

            modelBuilder.Entity("eVoting.Server.Models.Models.Voter", b =>
                {
                    b.Navigation("CreatedCandidates");

                    b.Navigation("CreatedVotelists");

                    b.Navigation("CreatedVotes");

                    b.Navigation("ModifiedCandidates");

                    b.Navigation("ModifiedVotelists");

                    b.Navigation("ModifiedVotes");
                });
#pragma warning restore 612, 618
        }
    }
}
